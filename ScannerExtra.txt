void scanner(char *fileName){
	
	FILE *ifp, *ofp, *ofp2;
	char buffer[11];
	
	
	ifp = (filename,"r");
	ofp = (,"w");
	ofp2 = ("r");
	
	while(fscanf(ifp, %s, &buffer) != EOF){
		
		strLen = strlen(*buffer);
		
		if((isdigit(buffer[0]) == 1){
			numEncoder(buffer, ofp);
		}
		
		if else(isalpha(buffer[0]) == 1){
				wordVarEncoder(*buffer,ofp);
		}
		
		else{
			symEncoder(buffer, ofp);			
		}
	}
	
}

void numberEncoder(char* buffer, FILE *ofp){
	
	int strLen;
	
	strLen = strlen(*buffer);
		
	if(strLen > NUMBER_MAX_LENGTH){
			fprintf(ofp,"ERROR: number length greater than 5");
		}
		
	while(i < strlength){
		
		if(isdigit(buffer[i]) != 1 ){					
			fprintf(ofp,"ERROR: all inputs beginning with an integer must contain only integers");					
		}
		
		if else( i == strLen-1 && isdigit(*buffer[i]) == 1){
				fprintf(ofp,"3%s ",*buffer);
		}

		else{
			i++;		
		}
	}	
}

void wordVarEncoder(char *buffer, FILE *ofp){
	
	int 1, strLen;
	
	strLen = strlen(*buffer);
	
	if(strLen > IDENTIFIER_MAX_LENGTH){
				fprintf(ofp,"ERROR: identifier length greater than 11");
	}
	
	for(i = 0;i < TABLE_SIZE; i++){
		
		if( strcmp(*buffer,*table[i]) == 1 ){
			
			fprintf(ofp,"%d ", i);
			return;
		}
	}
	
	if(isalpha(buffer[i]) == 1 ){
		fprintf(ofp,"2%s ",*buffer);
	}
}

void symEncoder(char *buffer, ofp){
	
	for(i = 0;i < TABLE_SIZE; i++){
		
		if( strcmp(*buffer,*table[i]) == 1 ){
			
			fprintf(ofp,"%d ", i);
			return;
		}
	}
	
	
}

-------------------------------------------------------------------------------
-------------------------------------------------------------------------------

void encoder(listyString* inputHead, FILE *ofp){
	
	int i, j;
	char *bufferChar, *prevBufferChar;
	int *bufferInt, *prevBufferInt;
	listyString *temporaryHead;
	
	
	if(inputHead = NULL){
		
		printf("listyString is NULL");
		return;
	}
		
	if(isalpha(inputHead-->c ) != 0){
			
		temporaryHead = inputhead;
		
		prevBufferChar = malloc(i + 1 * sizeof(char));
		prevBufferChar[i] = temporaryHead->c;
		temporaryHead = temporaryHead->next
		
		for( i = 1;isdigit(temporaryHead->c ) != 0 || isalpha(temporaryHead->c ) != 0; i++){
			
			bufferChar = malloc(i + 2 * sizeof(char));
			
			stringCopy(prevBufferChar, bufferChar, i);
			
			bufferChar[i] = temporaryHead->c;
			temporaryHead = temporaryHead->next;

			for(j = 0; j < TABLE_SIZE; j++){
				
				if(strcmp(*bufferChar, *table[j]) != 0){
					
					printf("%d ",j)
					
					encoder(temporaryHead,ofp);				
				}				
			}	

			free(prevBufferChar);
			prevBufferChar = NULL;
			
			prevBufferChar = malloc(i + 1 * sizeof(char));
			
			stringCopy(bufferChar, prevBufferChar, i);
			
			free(bufferChar);
			bufferChar = NULL;
		}
		
		if(i > NUMBER_MAX_LENGTH){
			
			printf("ERROR:variable too long ",);
			encoder(temporaryHead,ofp);
		}
		
		else{
			
			printf("2%s", *buffer);
			encoder(remporaryHead, ofp);
		}		
	}
	
	if else(isdigit(inputHead->c ) != 0){
		
		temporaryHead = inputhead;
		
		prevBufferInt = malloc(i + 1 * sizeof(char));
		prevBufferInt[i] = temporaryHead->c;
		temporaryHead = temporaryHead->next
		
		for(i = 1; isdigit(temporaryHead->c != 0); i++){
			
			bufferInt = malloc(i + 2 * sizeof(int));
			
			intCopy(prevBufferInt, bufferInt, int i);
						
			bufferInt[i] = temporaryHead->c;
			temporaryHead = temporaryHead->next;			
		}
		
		if(i > NUMBER_MAX_LENGTH){
			
			printf("ERROR:number too long ",);
			encoder(temporaryHead,ofp);
		}
		
		else{
			
			for(j = 0;j < i; j++){
				
				printf("3%d ", bufferInt[j]);
			}
			
			encoder(temporaryHead,ofp);
		}
	}
	
	else{
		
		i = 0;
		
		bufferChar = malloc(sizeof(int))
		temporaryHead = inputHead;
		
		bufferChar[i] = temporaryHead->c;
			
		i++;
		
		if(temporary->c == '<' || temporary->c == '>' && temporary->next->c == '=' ){
		
			
			
		
		}
		
		
		
		
	}
}